#!/bin/bash
#This compareupdate auto generated by shtoolsgenerater.
#Copyright by Lovelace.Lee.
#Version 2013.10.26

#此工具检测U盘的方式是扫描/media/下的所有文件夹
#U盘插入后会自动挂载到/media下
#确保盘中有一个PA.of.Lovelace.Lee文件目录
#如果没有则认为不是所需要的工作盘

#更新工具运行目录与U盘下对应目录的所有内容
#通常SOURCE_DIR的内容为最新内容
#在update之后,检测TARGET_DIR中的所有内容,如果在SOURCE_DIR下不对应存在,则将其删除

#注意脚本扫描不支持含有空格的文件名或者文件夹名
#

SOURCE_DIR=""
TARGET_DIR=""
CUR_DIR=$(pwd -P)

CHECK_DIR_NAME=PA.of.Lovelace.Lee

UDISK_MOUNT_DIR=""
PTR=""  #路径指向

SUPPORT_TAR_WITHOUT_SVN=N
SUPPORT_NEW=N

function print_help()
{
    echo ""
    echo "Usage: compareupdate [-options]"
    echo "  (-help|--help):   show help information."
    echo "  (-utol):          copy files and folders from udisk to local drive."
    echo "  (-ltou):          copy files and folders from local drive to udisk."
    echo "  (-tar):           tar current directory to bz2 type without .svn folder."
    echo "  (-new):           delete the target folder and copy current dir content into target folder."
    echo ""
}

function mount_udisk()
{
    udisk_dev_name=$1
    echo "mount udisk to /mnt/udisk"
    if [ ! -d /mnt/udisk ];then
        mkdir -p /mnt/udisk
    else
        mount -t vfat $udisk_dev_name /mnt/udisk
    fi
}
function umount_udisk()
{
    umount /mnt/udisk
}

#检测U盘路径
function check_udisk()
{
    DISK=`dir /media/`
    if [[ -z $DISK ]];then
        echo "No udisk found."
    fi
    for dir in $DISK
    do
        SUBDIR=`dir /media/${dir}/`
        for sub_dir in ${SUBDIR}
        do
            if [[ $sub_dir == ${CHECK_DIR_NAME} ]];then
                UDISK_MOUNT_DIR=/media/${dir}
                break;
            fi
        done
    done
    if [ -z $UDISK_MOUNT_DIR ];then
        echo "Udisk found but not working disk, make sure there is [PA.of.Lovelace.Lee] folder in it."
        exit;
    fi
}
#从U盘到当前目录的拷贝
function utol()
{
    directory=${CUR_DIR##*/}
    if [ -d ${UDISK_MOUNT_DIR}/${directory} ];then
        SOURCE_DIR=${UDISK_MOUNT_DIR}/${directory}
    else
        echo "${UDISK_MOUNT_DIR}/${directory} is not exist."
        exit
    fi
    TARGET_DIR=$CUR_DIR
}
#从当前目录到U盘的拷贝
function ltou()
{
    SOURCE_DIR=$CUR_DIR
    directory=${CUR_DIR##*/}
    TARGET_DIR=${UDISK_MOUNT_DIR}/${directory}
    if [ -d ${TARGET_DIR} ];then
        echo -ne "\b"
    else
        mkdir -p ${TARGET_DIR}
    fi
}

function caution()
{
    if [ -z $TARGET_DIR ] || [ -z $SOURCE_DIR ];then
        echo "Error with targetdir=$TARGET_DIR,sourcedir=$SOURCE_DIR"
        exit
    fi
}

function check_del_ford()
{
    caution;
    workdir=$1  
    cd $workdir
    list=`ls `

    for ford in $list
    do
        if [ -d $ford ];then
            echo "checking directory: $ford "
            if [ -d ${source_workdir}/${ford} ];then
                source_workdir=${source_workdir}/${ford}

                echo "entering $(pwd)/${ford}"
                check_del_ford $ford
                cd ..
                source_workdir=${source_workdir%/*}

            else
                echo "${source_workdir}/${ford} not exist. "
                rm -rvf ${ford}
            fi
        else
            echo "checking file: $ford "
            if [ ! -e ${source_workdir}/${ford} ];then
                echo "${source_workdir}/${ford} not exist. "
                rm -rvf ${ford}
            fi
        fi
    done
}

function update()
{
    if [[ $1 == "utol" ]];then
        utol;
    elif [[ $1 == "ltou" ]];then
        ltou;
    fi
    caution;
    if [[ $2 == "-tar" ]];then
        echo "tar directory instead copy."
        tar_current_dir_without_svn $TARGET_DIR
    elif [[ $2 == "-new" ]];then
        echo "delete target directory."
        rm -rf $TARGET_DIR/*
        echo "copy files and folders."
        cp -urvf $SOURCE_DIR/* $TARGET_DIR/
    else
        cp -urvf $SOURCE_DIR/* $TARGET_DIR/
        echo "del-check"
        source_workdir=${SOURCE_DIR}
        check_del_ford $TARGET_DIR
    fi
}

function tar_current_dir_without_svn()
{
    filename=${CUR_DIR##*/}
    targetdir=$1
    tarfile=${filename}.tar.bz2
    cd ..
    tar -jcvf $tarfile $filename --exclude-vcs --exclude=.* #--exclude-tag=.svn --exclude-tag-all=.svn --exclude-tag-under=.svn 
    mv $tarfile ${targetdir}
    cd ${filename}
}

#parse ARGS
#$* all args list passed by user
function parseARGS()
{
    for arg in ${*%% *}
    do
        #two arg type -arg or arg=value
        lvalue=`echo $arg | sed 's/=.*//g'`
        rvalue=`echo $arg | sed 's/.*=//g'`
        if [ -n "$arg" ];then #arg exist
            case $lvalue in
            -help|--help|--h|--he|--hel-h|-he|-hel)
                print_help
                exit 0;;
            -utol)
                PTR=utol;
            ;;
            -ltou)
                PTR=ltou;
            ;;
            -tar)
                SUPPORT_TAR_WITHOUT_SVN=Y;
            ;;
            -new)
                SUPPORT_NEW=Y;
            ;;
            *) 
                print_help
                exit 1;
                ;;
            esac
        fi
    done
}

if [ $# -lt 1 ];then
    print_help
    exit
fi

check_udisk;
parseARGS $*;
if [ $SUPPORT_TAR_WITHOUT_SVN == "Y" ];then
    echo "support tar directory."
    update $PTR -tar
elif [ $SUPPORT_NEW == "Y" ];then
    update $PTR -new
else
    update $PTR;
fi


