#!/bin/bash
#*******************************************************************************
#* Copyright (C), 2000-2014, Streamax Technology Co., Ltd.
#* Filename:  std.sh 
#* Author:    Lee
#* Version:   1.0.0
#* Date:      2014-5-21
#* BriefInfo: Standard function of miniconfigure
#*******************************************************************************

#Global variables

export PWD=`pwd -P`
export PDIR=`cd .. && pwd -P`
export PROJECT_DIR=$(pwd -P)
export DATE=$(date +"%Y-%m-%d")
export TIME=$(date +"%H:%M:%S")
export DT=$(date +"%Y-%m-%d_%H:%M:%S")

export FN_RULES=rules.mk
export FN_MAKEFILE_PDIR=.makefile
export FN_MAKEFILE=makefile

#File directory or file list
export SUBDIRLIST=$PROJECT_DIR  #contain project directory
export ALLFILELIST=
export SRC_FILE_LIST=
export ALL_SRC_FILE_LIST=

#Compiler option
export INCS=
export LIBS=
export OBJSLIST=
export CC=gcc
export CXX=g++
export AR=ar
export STRIP=strip
export USESTRIP=Y
export CCFLAGS="-Wall -O3"
export CXXFLAGS="-Wall -O3"
export LDFLAGS=
export CLIBFlAGS="-fPIC"
export LDLIBAFLAGS="-static"
export LDLIBSOFLAGS="-shared"
export DEFS=
export CROSS_COMPILER=

#Key option
export BUILDING_TYPE=exec
export PROJECT_TYPE=c                                  #c/c++
export PROJECT_NAME=main

#Install dir(Release directory)
export INSTALL_DIR=$PROJECT_DIR/bin
export BIN_DIR=$PROJECT_DIR/bin

#Global variable
export isnull_project=0

#Global functions

#$1 directory
#SUBDIRLIST all sub directories list is global variable
#FILELIST all file list
function findSubDirs()
{
    workdir=$1
    cd $workdir
    list=`ls `
    for ford in $list
    do
        if [ -d $ford ];then
            isgeneratemakefile $PWD/$ford
            if [ $? == 4 ];then
                export SUBDIRLIST=$SUBDIRLIST,$PWD/$ford
                export SUBDIRLIST=${SUBDIRLIST//,/ }
            fi
            findSubDirs $ford
            cd ..
        else
            export FILELIST=$ALLFILELIST,$PWD/$ford
            export FILELIST=${ALLFILELIST//,/ }
        fi
    done
}

#check if null src file project
#return 4 means project is without src file
#return 84 means project can be compiled
function isnullproject()
{ 
    workdir=$1
    cd $workdir
    list=`ls `
    for ford in $list
    do
        if [ -d $ford ];then
            isnullproject $ford
            #echo "$ford"
            cd ..
        else
            suffix=${ford##*.}
            #echo $suffix
            case $suffix in
                c|cpp)
                isnull_project=1
                ;;
            esac
        fi
    done
    if [[ $isnull_project == "1" ]];then
        #echo "yes"
        return 84
    else
        #echo "no"
        return 4
    fi
}

#$1 directory
#$2 "c" or "c++"
#OBJSLIST all *.o file list with path
function getOBJSLIST()
{
    workdir=$1
    if [[ $2 == "c++" ]];then
        ftype="cpp"
    elif [[ $2 == "c" ]];then
        ftype="c"
    fi

    cd $workdir
    list=`ls `
    for ford in $list
    do
        if [ -d $ford ];then
            getOBJSLIST $ford
            cd ..
        else
            if [[ ${ford##*.} == $ftype ]];then
                file=$PWD/$ford
                objfile=${file%%.*}
                export OBJSLIST=$OBJSLIST,${objfile}.o
                export OBJSLIST=${OBJSLIST//,/ }
            fi
        fi
    done
}
#$1 directory
#INCS all include directories with -I prefix
function findINCS()
{
    workdir=$1
    cd $workdir
    list=`ls`
    for ford in $list
    do
        if [ -d $ford ];then
            if [ $ford == "include" ];then
                export INCS=$INCS,-I\"$PWD/$ford\"
                export INCS=${INCS//,/ }
                findINCS $ford
                cd ..
            else
                findINCS $ford
                cd ..
            fi
                
        fi
    done
}
#$1 direcotry
#LIBS all lib directories with -L option
function findLIBS()
{
    workdir=$1
    cd $workdir
    list=`ls`
    for ford in $list
    do
        if [ -d $ford ];then
            if [ $ford == "lib" ];then
                export LIBS=$LIBS,-L\"$PWD/$ford\"
                export LIBS=${LIBS//,/ }
                findLIBS $ford
                cd ..
            else
                findLIBS $ford
                cd ..
            fi
        fi
    done
}

#create and add version head
function addVersionHead()
{
    echo "############################################" > $1
    echo "# Auto generated by configure tool." >> $1
    echo "# Copyright by Lovelace.Lee." >> $1
    echo "# Building time ${DATE}-${TIME}." >> $1
    echo "############################################" >> $1
}

#Check is current directory's makefile need to be generated
#whether generate makefile in $1
function isgeneratemakefile()
{
    workdir=$1
    tag=0
    filelist=`ls $workdir`
    for file in $filelist
    do
        if [ ! -d $file ];then
            isSrcFile $workdir/$file #
            if [ $? == 4 ];then
                tag=1
            fi
        fi
    done
    if [ $tag == 1 ];then
        return 4
    else
        return 84
    fi
}
#Check src file support
function isSrcFile()
{
    type=${1##*.}
    if [ $type == "c" ] || [ $type == "cpp" ];then
        return 4
    else
        return 84
    fi
}


#get *.c and *.cpp file list
#current dir
#SRC_FILE_LIST src file list in current dir
#ALL_SRC_FILE_LIST all src file list used for main rules
function getSrcFileList()
{
    list=`ls`
    SRC_FILE_LIST=
    for file in $list
    do
        isSrcFile $file
        if [ $? == 4 ];then
            SRC_FILE_LIST=$SRC_FILE_LIST,$file
            ALL_SRC_FILE_LIST=$ALL_SRC_FILE_LIST,$PWD/$file
            SRC_FILE_LIST=${SRC_FILE_LIST//,/ }
            ALL_SRC_FILE_LIST=${ALL_SRC_FILE_LIST//,/}
        fi
    done
}

#generate makefile in folder
#$1 folder
#$2 project type: c/c++ default[c]
#$3 "exec" or "liba" or "libso"
function generatemakefileinfolder()
{
    workdir=$1
    if [ $workdir == $PROJECT_DIR ];then
        #project directory has main makefile so src makefile named .makefile
        makefile=$FN_MAKEFILE_PDIR  
    else
        makefile=$FN_MAKEFILE
    fi
    echo -ne "generating ${workdir}/${makefile} ... "
    if [[ $2 == "c++" ]];then
        ftype="cpp"
        compiler=$CXX
        cflags=$CXXFLAGS
    else
        ftype="c"
        compiler=$CC
        cflags=$CCFLAGS
    fi

    if [[ $3 == "exec" ]];then # out put file
        cflags=$cflags
    elif [[ $3 == "liba" ]] || [[ $3 == "libso" ]];then
        cflags=$cflags,$CLIBFlAGS
        cflags=${cflags//,/ }
    fi

    cd $workdir
    addVersionHead ${makefile}
    
    echo "SRCS := \$(wildcard *.${ftype})" >> $makefile
    echo "OBJS := \$(patsubst %.${ftype}, %.o,\$(SRCS))" >> $makefile
    #echo "OBDS := \$(patsubst %.${ftype}, %.d,\$(SRCS))" >> $makefile
    
    echo "" >> $makefile

    echo ".PHONY: all clean distclean" >> $makefile

    echo "all:\$(OBJS)" >> $makefile
 
    echo "%.o:%.${ftype}" >> $makefile
    echo "	@echo \"Building file: \$(notdir \$<) ...\"" >> $makefile
    echo "	$compiler -c $cflags $DEFS $INCS -o\"\$@\" \"\$<\"" >> $makefile
    echo "	@echo \"Finished building: \$(notdir \$@)\"" >> $makefile
    

    echo "clean:" >> $makefile
    echo "	rm -rf \$(OBJS) \$(OBDS)" >> $makefile
    echo "distclean:" >> $makefile
    echo "	\$(MAKE) clean" >> $makefile
    echo "	rm -f ${makefile}" >> $makefile
    
    echo -ne "done\n"
}

#generate Main makefile
#$1 "c" or "c++" project type [c/c++]
#$2 "genobjsdir" or "Y" generate objs dir for compiler
#$3 "exec" or "liba" or "libso"
#$4 output filename
function generatemakefile()
{
    main_makefile=$PROJECT_DIR/${FN_MAKEFILE}
    
    findINCS $PROJECT_DIR;
    findLIBS $PROJECT_DIR;

    projecttype=$1
    if [[ $1 == "c++" ]];then #compiler & #cflags
        compiler=$CXX
        cflags=$CXXFLAGS
    else
        compiler=$CC
        cflags=$CCFLAGS
    fi

    findSubDirs $PROJECT_DIR
    objsdir=$SUBDIRLIST #all sub src dirs
    
    liborexec=$2
    if [[ $2 == "exec" ]];then # out put file
        a_out=$3
    elif [[ $2 == "liba" ]];then
        a_out="lib$3.a"
        libldflag=$LDLIBAFLAGS
    elif [[ $2 == "libso" ]];then
        a_out="lib$3.so"
        libldflag=$LDLIBSOFLAGS
    fi

    for dir in $objsdir
    do
        echo "OBJSDIR \"$dir\""
        isgeneratemakefile $dir
        if [ $? == 4 ];then
            generatemakefileinfolder $dir $projecttype $liborexec
        fi
    done
    getOBJSLIST $PROJECT_DIR $projecttype #recursion search
    
    echo "objsdir \"$objsdir\""
    if [[ $objsdir == $PROJECT_DIR ]];then
        echo "Only PROJECT_DIR has src file."
        objsdir=$objsdir
    #elif [[ -e $FN_MAKEFILE_PDIR ]];then
       #echo "PROJECT_DIR and subdirs have src file."
       #objsdir=$objsdir
    else
        echo "Maybe PROJECT_DIR and subdirs both have src file, but only give subdirs list."
        objsdir=${objsdir/${PROJECT_DIR}/}
    fi

    echo -n "Configuring main_makefile..."
    echo "###########################################################" > ${main_makefile}
    echo "# Makefile of the project" >> ${main_makefile}
    echo "# Auto generated by configure" >> ${main_makefile}
    echo "# Build date $(date -R)" >> ${main_makefile}
    echo "# Copyright by Lovelace.Lee. " >> ${main_makefile}
    echo "###########################################################" >> ${main_makefile}

    echo "" >> ${main_makefile}
    echo "# All definition" >> ${main_makefile}

    echo "" >> ${main_makefile}
    echo "BUILDING_DIR=$objsdir" >> ${main_makefile}
    
    echo "" >> ${main_makefile}
    echo ".PHONY: default all clean distclean build install run \$(BUILDING_DIR)" >> ${main_makefile}
    echo "default: all" >> ${main_makefile}
    echo "	@echo \"\"" >> ${main_makefile}
    echo "	$compiler $libldflag $LDFLAGS -o ${BIN_DIR}/${a_out} $OBJSLIST $LIBS" >> ${main_makefile}
    echo "	\$(MAKE) --no-print-directory post-build" >> ${main_makefile}
    echo "	@echo \"Building ok, check output file in [./bin].\"" >> ${main_makefile}

    if [[ $objsdir == $PROJECT_DIR ]];then # there is no sub src dirs
        echo "all: " >> ${main_makefile}
        echo "	\$(MAKE) \$@ -f $FN_MAKEFILE_PDIR" >> ${main_makefile}
        echo "clean: " >> ${main_makefile}
        echo "	\$(MAKE) \$@ -f $FN_MAKEFILE_PDIR" >> ${main_makefile}
        echo "	rm -f ${BIN_DIR}/${a_out}" >> ${main_makefile}
        echo "" >> ${main_makefile}
        echo "distclean: " >> ${main_makefile}
        echo "	\$(MAKE) \$@ -f $FN_MAKEFILE_PDIR" >> ${main_makefile}
        echo "	rm -f makefile" >> ${main_makefile}
        echo "	rm -rvf ${BIN_DIR}" >> ${main_makefile}
        echo "	@echo \"Done.\"" >> ${main_makefile}
    else
        echo "all:" >> ${main_makefile}
        if [ -e $FN_MAKEFILE_PDIR ];then
            echo "$FN_MAKEFILE_PDIR is exist"
            echo "	\$(MAKE) \$@ -f $FN_MAKEFILE_PDIR" >> ${main_makefile}
        fi
        echo "	@echo \"\"" >> ${main_makefile}
        echo "	\$(MAKE) \$(BUILDING_DIR) TARGET=\$@" >> ${main_makefile}
        echo "clean:" >> ${main_makefile}
        if [ -e $FN_MAKEFILE_PDIR ];then
            echo "	\$(MAKE) \$@ -f $FN_MAKEFILE_PDIR" >> ${main_makefile}
        fi
        echo "	@echo \"\"" >> ${main_makefile}
        echo "	\$(MAKE) \$(BUILDING_DIR) TARGET=\$@" >> ${main_makefile}
        echo "	rm -f ${BIN_DIR}/${a_out}" >> ${main_makefile}
        echo "" >> ${main_makefile}
        echo "distclean:" >> ${main_makefile}
        if [ -e $FN_MAKEFILE_PDIR ];then
            echo "	\$(MAKE) \$@ -f $FN_MAKEFILE_PDIR" >> ${main_makefile}
        fi
        echo "	@echo \"\"" >> ${main_makefile}
        echo "	\$(MAKE) \$(BUILDING_DIR) TARGET=\$@" >> ${main_makefile}
        echo "	rm -f makefile" >> ${main_makefile}
        
        echo "	rm -rvf ${BIN_DIR}" >> ${main_makefile}

        echo "\$(BUILDING_DIR):" >> ${main_makefile}
        echo "	\$(MAKE) -C \$@ \$(TARGET)" >> ${main_makefile}
    fi
    echo "build:" >> ${main_makefile}
    echo "	\$(MAKE) clean" >> ${main_makefile}
    echo "	\$(MAKE) default" >> ${main_makefile}
    echo "run:" >> ${main_makefile}
    echo "	\$(MAKE) default" >> ${main_makefile}
    echo "	${BIN_DIR}/${a_out}" >> ${main_makefile}
    echo "post-build:" >> ${main_makefile}
    if [[ $3 == "exec" ]] && [[ $USESTRIP == Y ]];then #Not strip lib
        echo "	$CROSS_COMPILER$STRIP ${BIN_DIR}/${a_out}" >> ${main_makefile}
    fi
    echo "	-@echo ' '" >> ${main_makefile}
    echo "install:" >> ${main_makefile}
    echo "	\$(MAKE) default" >> ${main_makefile}
    echo "	cp -f ${BIN_DIR}/${a_out} ${INSTALL_DIR}/" >> ${main_makefile}
    echo "	-@echo ' '" >> ${main_makefile}
    
    echo ".SECONDARY: post-build run" >> ${main_makefile}

    echo "Done."
}



